# Custom Release Workflow to avoid submodule fetch issues
# Builds and publishes provider packages directly

name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  GO_VERSION: '1.25.3'
  REGISTRY: ghcr.io/rossigee

jobs:
  release:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 1  # Shallow clone to avoid submodule history issues

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Vendor Dependencies
        run: go mod vendor

      - name: Build Provider
        run: make build

      - name: Build and Push Docker Image
        run: |
          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          export DOCKER_IMAGE="${{ env.REGISTRY }}/${{ github.event.repository.name }}:${VERSION}"

          # Build and push versioned image
          make docker.build
          make docker.push

          # Tag and push latest
          LATEST_IMAGE="${{ env.REGISTRY }}/${{ github.event.repository.name }}:latest"
          docker tag ${DOCKER_IMAGE} ${LATEST_IMAGE}
          docker push ${LATEST_IMAGE}

      - name: Build and Push Crossplane Package
        run: |
          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          export XP_VERSION=${VERSION}

          # Build and push Crossplane package
          make xpkg.build
          make xpkg.push

  # Add GitHub release creation (preserves your custom feature)
  github-release:
    needs: release
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.event.inputs.version || github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true

  # Add publication verification (preserves your custom verification)
  verify-publication:
    needs: release
    runs-on: ubuntu-24.04
    steps:
      - name: Verify Publication
        run: |
          set -e  # Fail fast on any error

          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          PROVIDER_NAME="${{ github.event.repository.name }}"
          REGISTRY_PATH="ghcr.io/rossigee/${PROVIDER_NAME}"

          echo "Verifying publication to ${REGISTRY_PATH}:${VERSION}"

          # Verify version tag exists and is pullable
          if docker pull "${REGISTRY_PATH}:${VERSION}" > /dev/null 2>&1; then
            echo "✅ Verified container image ${VERSION}"
          else
            echo "❌ Failed to pull container image ${VERSION}"
            exit 1
          fi

          # Verify latest tag exists and is pullable
          if docker pull "${REGISTRY_PATH}:latest" > /dev/null 2>&1; then
            echo "✅ Verified container image latest"
          else
            echo "❌ Failed to pull container image latest"
            exit 1
          fi

          # Verify both tags point to same image (identical digests)
          VERSION_DIGEST=$(docker inspect "${REGISTRY_PATH}:${VERSION}" --format='{{index .RepoDigests 0}}' | cut -d'@' -f2)
          LATEST_DIGEST=$(docker inspect "${REGISTRY_PATH}:latest" --format='{{index .RepoDigests 0}}' | cut -d'@' -f2)

          if [ "$VERSION_DIGEST" = "$LATEST_DIGEST" ]; then
            echo "✅ Version and latest tags point to identical image"
            echo "   Digest: ${VERSION_DIGEST}"
          else
            echo "❌ Version and latest tags point to different images"
            echo "   Version digest: ${VERSION_DIGEST}"
            echo "   Latest digest:  ${LATEST_DIGEST}"
            exit 1
          fi