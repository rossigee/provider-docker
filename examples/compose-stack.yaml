apiVersion: compose.docker.crossplane.io/v1alpha1
kind: ComposeStack
metadata:
  name: webapp-stack
  namespace: default
spec:
  forProvider:
    # Docker Compose content inline
    compose: |
      version: '3.8'
      services:
        web:
          image: nginx:latest
          ports:
            - "80:80"
          depends_on:
            - api
          environment:
            API_HOST: api
            API_PORT: "3000"
        
        api:
          image: node:18-alpine
          ports:
            - "3000:3000"
          environment:
            NODE_ENV: production
            DATABASE_URL: postgres://db:5432/myapp
          depends_on:
            - db
        
        db:
          image: postgres:13
          environment:
            POSTGRES_DB: myapp
            POSTGRES_USER: ${DB_USER}
            POSTGRES_PASSWORD: ${DB_PASSWORD}
          volumes:
            - db_data:/var/lib/postgresql/data
          ports:
            - "5432:5432"
      
      volumes:
        db_data:
      
      networks:
        default:
          driver: bridge

    # Environment variables for interpolation
    environment:
      - name: DB_USER
        value: "app_user"
      - name: DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: database-secret
            key: password

    # Project name (equivalent to docker-compose -p)
    projectName: mywebapp

    # Override specific service configurations
    serviceOverrides:
      web:
        replicas: 2
        resources:
          limits:
            memory: "512Mi"
            cpu: "0.5"
          requests:
            memory: "256Mi"
            cpu: "0.1"
      
      db:
        resources:
          limits:
            memory: "1Gi"
            cpu: "1.0"

  # Provider configuration reference
  providerConfigRef:
    name: default

  # Deletion policy
  deletionPolicy: Delete
---
apiVersion: v1
kind: Secret
metadata:
  name: database-secret
  namespace: default
type: Opaque
data:
  password: bXlzZWNyZXRwYXNzd29yZA==  # mysecretpassword
  api-key: bXktYXBpLWtleQ==  # my-api-key
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: default
data:
  database-host: "postgres.example.com"
  log-level: "info"
  feature-flags: "feature1,feature2,feature3"
---
apiVersion: compose.docker.crossplane.io/v1alpha1
kind: ComposeStack
metadata:
  name: simple-redis
  namespace: default
spec:
  forProvider:
    # Reference to ConfigMap containing compose file
    composeRef:
      configMapRef:
        name: redis-compose
        key: docker-compose.yml
    
    projectName: redis-stack
    
    serviceOverrides:
      redis:
        replicas: 1
        resources:
          limits:
            memory: "256Mi"

  providerConfigRef:
    name: default

  deletionPolicy: Delete
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-compose
  namespace: default
data:
  docker-compose.yml: |
    version: '3.8'
    services:
      redis:
        image: redis:7-alpine
        ports:
          - "6379:6379"
        command: redis-server --appendonly yes
        volumes:
          - redis_data:/data
    
    volumes:
      redis_data:
---
apiVersion: compose.docker.crossplane.io/v1alpha1
kind: ComposeStack
metadata:
  name: advanced-webapp
  namespace: default
spec:
  forProvider:
    # Docker Compose content with environment variable references
    compose: |
      version: '3.8'
      services:
        frontend:
          image: nginx:alpine
          ports:
            - "8080:80"
          environment:
            API_HOST: ${API_HOST}
            LOG_LEVEL: ${LOG_LEVEL}
            FEATURE_FLAGS: ${FEATURE_FLAGS}
          depends_on:
            - backend
        
        backend:
          image: node:18-alpine
          ports:
            - "3000:3000"
          environment:
            NODE_ENV: production
            DATABASE_HOST: ${DATABASE_HOST}
            DATABASE_PASSWORD: ${DATABASE_PASSWORD}
            API_KEY: ${API_KEY}
            LOG_LEVEL: ${LOG_LEVEL}
          depends_on:
            - redis

        redis:
          image: redis:7-alpine
          command: redis-server --appendonly yes
          volumes:
            - redis_data:/data

      volumes:
        redis_data:

    # Environment variables for interpolation
    # These demonstrate both direct values and references to ConfigMaps/Secrets
    environment:
      - name: API_HOST
        value: "backend:3000"
      - name: LOG_LEVEL
        valueFrom:
          configMapKeyRef:
            name: app-config
            key: log-level
      - name: FEATURE_FLAGS
        valueFrom:
          configMapKeyRef:
            name: app-config
            key: feature-flags
      - name: DATABASE_HOST
        valueFrom:
          configMapKeyRef:
            name: app-config
            key: database-host
      - name: DATABASE_PASSWORD
        valueFrom:
          secretKeyRef:
            name: database-secret
            key: password
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: database-secret
            key: api-key

    # Project name (equivalent to docker-compose -p)
    projectName: advanced-webapp

    # Override specific service configurations
    serviceOverrides:
      frontend:
        replicas: 2
        resources:
          limits:
            memory: "256Mi"
            cpu: "0.5"
          requests:
            memory: "128Mi"
            cpu: "0.1"
      
      backend:
        resources:
          limits:
            memory: "512Mi"
            cpu: "1.0"
          requests:
            memory: "256Mi"
            cpu: "0.2"

  # Provider configuration reference
  providerConfigRef:
    name: default

  # Deletion policy
  deletionPolicy: Delete